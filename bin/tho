#!/usr/bin/env ruby
require 'gli'
require 'tho'

CHAR_ERROR = "\u274c"
CHAR_WARNING = "\u25b2"
CHAR_CHECK = "\u2714"
CHAR_VERBOSE = "\u2139"
CHAR_FLAG = "\u2691"

COLOR_ESCAPES = {
  :none => 0,
  :bright => 1,
  :black => 30,
  :red => 31,
  :green => 32,
  :yellow => 33,
  :blue => 34,
  :magenta => 35,
  :cyan => 36,
  :white => 37,
  :default => 39,
}

def colored( clr, text = nil )  
  "\x1B[" + ( COLOR_ESCAPES[ clr ] || 0 ).to_s + 'm' + ( text ? text + "\x1B[0m" : "" )
end

def coloredBackground( clr, text = nil )  
  "\x1B[" + ( ( COLOR_ESCAPES[ clr ] || 0 ) + 10 ).to_s + 'm' + ( text ?  text + "\x1B[0m" : "" )
end

# Global variables
$verbose = false

class App
  extend GLI::App

  program_desc 'An assistant for the easy tasks'

  version Tho::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Verbose logging'
  switch [:v,:verbose]

  desc 'Create'
  command :create do |c|
    c.command :password do |sc|
      sc.flag ['length'], 
        :desc => 'Default length of password'

      sc.flag ['symbols'], 
        :desc => 'Use symbols',
        :must_match => ['true', 'false']
      
      sc.flag ['digits'], 
        :desc => 'Use digits',
        :must_match => ['true', 'false']

      sc.action do |global_options,options,args|
        Commands::Create.new('password', global_options.merge(options)).execute
      end
    end

    c.command :uuid do |sc|
      sc.action do |global_options,options,args|
        Commands::Create.new('uuid', global_options.merge(options)).execute
      end
    end
  end

  desc 'Configure Tho'
  command :config do |c| 
    c.flag ['version-check'], 
      :desc => 'Enable or disable the version check',
      :must_match => ['true', 'false']

    c.action do |global_options,options,args|
      Commands::Config.new('global', global_options.merge(options)).execute
    end

    c.command :passwords do |sc|
      sc.flag ['length'], 
        :desc => 'Default length of password'

      sc.flag ['symbols'], 
        :desc => 'Use symbols',
        :must_match => ['true', 'false']
      
      sc.flag ['digits'], 
        :desc => 'Use digits',
        :must_match => ['true', 'false']

      sc.action do |global_options,options,args|
        Commands::Config.new('passwords', global_options.merge(options)).execute
      end
    end
  end

  desc 'Upgrade Tho'
  command :upgrade do |c|
    c.action do |global_options,options,args|
      Commands::Upgrade.new(global_options.merge(options)).execute
    end
  end

  pre do |global,command,options,args|

    # Set verbose logging
    $verbose = global[:verbose]

    Settings.refresh

    commandName = command.name_for_help.first
    if Settings.get('version_check', true) == true && commandName != 'upgrade'
      Updater.check
    end

    true
  end

  post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
